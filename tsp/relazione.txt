Generazione di istanze:
Il problema consisteste nel trovare una serie di movimenti per il trapano al fine di minimizzare il tempo per creare tutti i buchi. Questo e' proporzionale alla distanza percorsa dal trapano. Quindi il fine ultimo risulta quello di minimizzare la distanza compiuta dal trapano mobile.
L'oggetto da forare coniste in una copertura per pannelli elettrici, ovviamenti i buchi sono generalmente disposti in maniera regolare e seguendo quindi una conformazione a griglia. 
Il problema risulta quindi definito dalla disposizione dei buchi nel panello di plastica, mentre l'input del problema deve quindi generare le distanze tra i buchi.
Scopo della classe generatrice e' quindi quello di creare istanze credibili al particolare caso. 

GRID PANEL -------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------
(PUNTI PRATICAMENTE ALLINEATI SUL BASSO)
PROBLEM: 0
holes number : 5
problem setting time : 121 micro_sec
problem optimizing time : 19830 micro_sec
Objval: 144
plotting solution panel
-------------------------------------------
PROBLEM: 1
holes number : 10
problem setting time : 125 micro_sec
problem optimizing time : 216833 micro_sec
Objval: 324
plotting solution panel
-------------------------------------------
PROBLEM: 2
holes number : 20
problem setting time : 1034 micro_sec
problem optimizing time : 849381 micro_sec
Objval: 684
plotting solution panel
-------------------------------------------
PROBLEM: 3
holes number : 30
problem setting time : 2368 micro_sec
problem optimizing time : 3256786 micro_sec
Objval: 1044

provando a mantenere lo stesso numero di punti, ma griglia piu' ampia => punti piu' sparsi
notiamo solo un piccolo overhead, ma notiamo delle curve comparabili (probabilmente dovuto al fatto che i punti potrebbero essere piu' sparsi???)



PARAGRAFO - 5 MINUTES BEST solo

PARTE 2
E' stato scelto un metodo euristico per risolvere la seconda parte dell'esercizio. E' stata presa questa decisione in quanto i
metodi esatti nonostante la varie ottimizzazioni come la generazione non esaustica dei vincoli SEC richiedono tempo esponenziale addirittura anche nella risoluzione di ogni sottoproblema risallato. Anche decidendo di stoppare l'algoritmo dopo un determinato quantitativo di tempo, non si avrebbe una soluzione feasible in quanto potrebbe avere piu' sub-tour. Nell'alg della parte 1 in caso di early stop cmq disponiamo di una soluzione feasible, ma non ottimale quindi in qualche modo accettabile. In conclusione ho ritenuto piu' interessante esplorare metodi meta-euristici, soprattutto in un'ottica di confronto con i metodi esatti quando questi terminano e l'incumbent solution di questi in caso di ecessivo sforzo computazionale.
s


EURISTICHE COSTRUTTIVE PER INIT SOL
TSP: euristiche costruttiveCon il termine “euristiche costruttive” si identifica una ampia famiglia di euristiche che arrivano allasoluzione procedendo un vertice alla volta seguendo delle regole prefissate. Lo schema generale diqueste euristiche è composto da tre passi:
1.Inizializzazione:scelta del ciclo parziale iniziale (o del punto di partenza);
2.Selezione:scelta del prossimo vertice da inserire nella soluzione parziale;
3.Inserimento:scelta della posizione dove inserire il nuovo vertice.Vediamo ora come queste regole vengono istanziate in cinque euristiche costruttive diverse.
Nearest Neighbor ------------------
1.Inizializzazione:si parte con il cammino composto dal solo vertice 0
2.Selezione:sia(v0,...,vk)il cammino corrente. Trova il verticevk+1non ancora inseritonel circuito a distanza minima davk;
3.Inserimento:inseriscivk+1subito dopovknel cammino;
4.  ripeti da (2) finché non hai inserito tutti i vertici nel cammino;
5.  chiudi il circuito inserendo il vertice iniziale 0 alla fine del cammino(0,...,vn).
Random Insertion --------------------
1.Inizializzazione:considera il circuito parziale composto dal solo vertice0.  Trova unverticejche minimizzaw(0,j)e costruisci il circuito parziale(0,j,0);
2.Selezione:seleziona in modo casuale un verticeknon ancora inserito nel circuito;
3.Inserimento:trova l’arco{i,j}del circuito parziale che minimizza il valorew(i,k) +w(k,j)−w(i,j)e inserisciktraiej;
4.  ripeti da (2) finché non hai inserito tutti i vertici nel circuito.Le euristiche “Closest Insertion”, “Farthest Insertion” e “Cheapest Insertion” si differenzianoda Random Insertion nella selezione del vertice, che non è più arbitrario ma segue una regolaprecisa. Inizializzazione e Inserimento non variano.
Cheapest Insertion ---------------------------
1.Inizializzazione:considera il circuito parziale composto dal solo vertice0.  Trova unverticejche minimizzaw(0,j)e costruisci il circuito parziale(0,j,0);
2.Selezione:trova un verticeknon presente nel circuito parziale e un arco{i,j}del circuitoparziale che minimizzano il valorew(i,k)+w(k,j)−w(i,j);
3.Inserimento:inserisciktraiej;
4.  ripeti da (2) finché non hai inserito tutti i vertici nel circuito.Dato un insieme di verticiC⊆Vche rappresentano un circuito parziale, ed un verticek6∈C,definiamo ladistanzadikdaCcome il minimo peso di un arco che collegakaC:δ(k,C) =minh∈Cw(h,k)Le euristiche “Closest Insertion” e “Farthest Insertion” selezionano i vertici che minimizzano omassimizzano la distanza dal circuito parziale.Closest Insertion1.Inizializzazione:considera il circuito parziale composto dal solo vertice0.  Trova unverticejche minimizzaw(0,j)e costruisci il circuito parziale(0,j,0);
2.Selezione:trova un verticeknon presente nel circuito parzialeCcheminimizzaδ(k,C);
3.Inserimento:trova l’arco{i,j}del circuito parziale che minimizza il valorew(i,k) +w(k,j)−w(i,j)e inserisciktraiej;
4.  ripeti da (2) finché non hai inserito tutti i vertici nel circuito.Farthest Insertion1.Inizializzazione:considera il circuito parziale composto dal solo vertice0.  Trova unverticejche minimizzaw(0,j)e costruisci il circuito parziale(0,j,0);
2.Selezione:trova un verticeknon presente nel circuito parzialeCchemassimizzaδ(k,C);
3.Inserimento:trova l’arco{i,j}del circuito parziale che minimizza il valorew(i,k) +
7.8  Approssimare TSP costruendo un albero di copertura minimo77w(k,j)−w(i,j)e inserisciktraiej;
4.  ripeti da (2) finché non hai inserito tutti i vertici nel circuito.Fattori di approssimazione delle euristiche costruttive.È possibile dimostrare che le cinque euristiche costruttive permettono di trovare una soluzionelog(n)-approssimata a TSP, quando la disuguaglianza triangolare è rispettata. Nel caso di ClosestInsertion e Cheapest Insertion il fattore di approssimazione può essere ulteriormente abbassato,dimostrando che entrambe le euristiche permettono di ottenere un algoritmo2-approssimato perTSP (quando la disuguaglianza triangolare è rispettata).
